# Â© Copyright 2025 Stuart Parmenter
# SPDX-License-Identifier: MIT

# Team Tracker (LVGL + DDP)
# Displays team logos, scores, and game status
#
# Required vars:
#   page_friendly_name: Name of the page (e.g., Team Tracker - Falcons)
#   entity_id: Home Assistant team tracker sensor (e.g., sensor.team_tracker_nfl_falcons)
#   uid: Unique identifier for this instance (e.g., "falcons")

lvgl_page_manager:
  pages:
    - page: teamtracker_${uid}
      friendly_name: "${page_friendly_name}"

substitutions:
  # Page-specific configuration
  TEAM_LOGO_SIZE: "32"
  TEAM_LOGO_Y: "0"
  AWAY_LOGO_X: "0"
  HOME_LOGO_X: "32"


# DDP sink + canvas binding for team logos
ddp_stream:
  id: ddp
  streams:
    - id: stream_away_${uid}
      canvas: "away_logo_canvas_${uid}"
      back_buffers: 0
    - id: stream_home_${uid}
      canvas: "home_logo_canvas_${uid}"
      back_buffers: 0

# WebSocket control for logo streaming
ws_ddp_control:
  id: ws_ddp
  outputs:
    - id: output_away_${uid}
      ddp_stream: stream_away_${uid}
      src: ""
      loop: false
      format: rgb565
    - id: output_home_${uid}
      ddp_stream: stream_home_${uid}
      src: ""
      loop: false
      format: rgb565

script:
  - id: update_game_status_${uid}
    mode: restart
    then:
      - lambda: |-
          std::string status_text = "";
          std::string game_state = id(ha_teamtracker_entity_${uid}).has_state() ? id(ha_teamtracker_entity_${uid}).state : "";
          std::string kickoff_in = id(ha_kickoff_in_${uid}).has_state() ? id(ha_kickoff_in_${uid}).state : "";
          std::string game_clock = id(ha_game_clock_${uid}).has_state() ? id(ha_game_clock_${uid}).state : "";
          std::string quarter = id(ha_game_quarter_${uid}).has_state() ? id(ha_game_quarter_${uid}).state : "";
          std::string sport = id(ha_sport_name_${uid}).has_state() ? id(ha_sport_name_${uid}).state : "";

          if (game_state == "PRE") {
            // Pre-game: show kickoff time
            status_text = kickoff_in;
          } else if (game_state == "IN") {
            // In-game: show period/quarter and clock
            if (sport == "hockey") {
              status_text = game_clock;
            } else {
              if (!quarter.empty() && !game_clock.empty()) {
                status_text = "Q" + quarter + " " + game_clock;
              } else if (!quarter.empty()) {
                status_text = "Q" + quarter;
              } else if (!game_clock.empty()) {
                status_text = game_clock;
              } else {
                status_text = "In Progress";
              }
          } else if (game_state == "POST") {
            // Post-game: show clock (typically "Final")
            status_text = !game_clock.empty() ? game_clock : "Final";
          } else {
            // Fallback to kickoff_in or game state
            status_text = !kickoff_in.empty() ? kickoff_in : game_state;
          }

          lv_label_set_text(id(game_status_lbl_${uid}), status_text.c_str());

# Pull NFL data from Home Assistant
text_sensor:
  - platform: homeassistant
    id: ha_team_abbr_${uid}
    entity_id: ${entity_id}
    attribute: team_abbr
    internal: true
    on_value:
      - lvgl.label.update:
          id: away_team_lbl_${uid}
          text: !lambda 'return x.c_str();'

  - platform: homeassistant
    id: ha_team_logo_${uid}
    entity_id: ${entity_id}
    attribute: team_logo
    internal: true
    on_value:
      - ws_ddp_control.set_src:
          id: output_away_${uid}
          src: !lambda "return x;"

  - platform: homeassistant
    id: ha_team_score_${uid}
    entity_id: ${entity_id}
    attribute: team_score
    internal: true
    on_value:
      - lvgl.label.update:
          id: away_score_lbl_${uid}
          text: !lambda 'return x.c_str();'

  - platform: homeassistant
    id: ha_team_homeaway_${uid}
    entity_id: ${entity_id}
    attribute: team_homeaway
    internal: true

  - platform: homeassistant
    id: ha_opponent_abbr_${uid}
    entity_id: ${entity_id}
    attribute: opponent_abbr
    internal: true
    on_value:
      - lvgl.label.update:
          id: home_team_lbl_${uid}
          text: !lambda 'return x.c_str();'

  - platform: homeassistant
    id: ha_opponent_logo_${uid}
    entity_id: ${entity_id}
    attribute: opponent_logo
    internal: true
    on_value:
      - ws_ddp_control.set_src:
          id: output_home_${uid}
          src: !lambda "return x;"

  - platform: homeassistant
    id: ha_opponent_score_${uid}
    entity_id: ${entity_id}
    attribute: opponent_score
    internal: true
    on_value:
      - lvgl.label.update:
          id: home_score_lbl_${uid}
          text: !lambda 'return x.c_str();'

  - platform: homeassistant
    id: ha_event_name_${uid}
    entity_id: ${entity_id}
    attribute: event_name
    internal: true

  - platform: homeassistant
    id: ha_sport_name_${uid}
    entity_id: ${entity_id}
    attribute: sport
    internal: true

  - platform: homeassistant
    id: ha_kickoff_in_${uid}
    entity_id: ${entity_id}
    attribute: kickoff_in
    internal: true
    on_value:
      - script.execute:
          id: update_game_status_${uid}

  - platform: homeassistant
    id: ha_tv_network_${uid}
    entity_id: ${entity_id}
    attribute: tv_network
    internal: true

  - platform: homeassistant
    id: ha_venue_${uid}
    entity_id: ${entity_id}
    attribute: venue
    internal: true

  - platform: homeassistant
    id: ha_teamtracker_entity_${uid}
    entity_id: ${entity_id}
    internal: true
    on_value:
      - script.execute:
          id: update_game_status_${uid}

  - platform: homeassistant
    id: ha_game_clock_${uid}
    entity_id: ${entity_id}
    attribute: clock
    internal: true
    on_value:
      - script.execute:
          id: update_game_status_${uid}

  - platform: homeassistant
    id: ha_game_quarter_${uid}
    entity_id: ${entity_id}
    attribute: quarter
    internal: true
    on_value:
      - script.execute:
          id: update_game_status_${uid}

lvgl:
  style_definitions:
    - id: st_team_text_${uid}
      text_opa: 90%
    - id: st_score_text_${uid}
      text_opa: 100%
    - id: st_status_text_${uid}
      text_opa: 75%

  pages:
    - id: teamtracker_${uid}
      bg_color: 0x000000
      widgets:
        # Away team logo (left)
        - canvas:
            id: away_logo_canvas_${uid}
            x: ${AWAY_LOGO_X}
            y: ${TEAM_LOGO_Y}
            width: ${TEAM_LOGO_SIZE}
            height: ${TEAM_LOGO_SIZE}

        # Home team logo (right)
        - canvas:
            id: home_logo_canvas_${uid}
            x: ${HOME_LOGO_X}
            y: ${TEAM_LOGO_Y}
            width: ${TEAM_LOGO_SIZE}
            height: ${TEAM_LOGO_SIZE}

        # Away team name and score (left side)
        - label:
            id: away_team_lbl_${uid}
            x: 0
            y: 34
            width: 32
            text_align: CENTER
            text: "AWAY"
            styles: ["st_team_text_${uid}"]

        - label:
            id: away_score_lbl_${uid}
            x: 0
            y: 44
            width: 32
            text_align: CENTER
            text: "0"
            styles: ["st_score_text_${uid}"]

        # Home team name and score (right side)
        - label:
            id: home_team_lbl_${uid}
            x: 32
            y: 34
            width: 32
            text_align: CENTER
            text: "HOME"
            styles: ["st_team_text_${uid}"]

        - label:
            id: home_score_lbl_${uid}
            x: 32
            y: 44
            width: 32
            text_align: CENTER
            text: "0"
            styles: ["st_score_text_${uid}"]

        # Game status (bottom)
        - label:
            id: game_status_lbl_${uid}
            x: 0
            y: 54
            width: 64
            text_align: CENTER
            text: "Game Status"
            styles: ["st_status_text_${uid}"]

      on_load:
        then:
          - lambda: |-
              id(output_away_${uid}).start();
              id(output_home_${uid}).start();
