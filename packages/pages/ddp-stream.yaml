# Â© Copyright 2025 Stuart Parmenter
# SPDX-License-Identifier: MIT

# DDP Stream Page
# Video streaming via DDP protocol
#
# Required vars:
#   page_friendly_name: Name of the page (e.g., Video Stream)
#   back_buffers: Number of back buffers (0-2)
#   default_video_src: Default video source URL or file path

lvgl_page_manager:
  pages:
    - page: ddp_video
      friendly_name: "${page_friendly_name}"

# UDP DDP sink + canvas bindings (no w/h required here)
ddp_canvas:
  - id: stream_video
    canvas: video_canvas
    back_buffers: ${back_buffers}

# -----------------------------
# WebSocket control
# -----------------------------
media_proxy_control:
  id: mp_control
  outputs:
    - id: output_video
      stream: stream_video
      src: ${default_video_src}
      format: rgb565
      loop: true

# -----------------------------
# LVGL page with a single canvas
# -----------------------------
lvgl:
  pages:
    - id: ddp_video
      widgets:
        - canvas:
            id: video_canvas
            width: ${DISPLAY_W}
            height: ${DISPLAY_H}
      on_load:
        then:
          - lambda: |-
              id(output_video).start();
      on_unload:
        then:
          - lambda: |-
              id(output_video).stop();

# -----------------------------
# Runtime source change
# -----------------------------
text:
  - platform: template
    id: video_src_ctl
    name: "Media Source"
    optimistic: true
    initial_value: ${default_video_src}
    mode: text
    min_length: 4
    max_length: 255
    restore_value: true
    on_value:
      then:
        - media_proxy_control.set_source:
            id: output_video
            src: !lambda "return x;"