# Â© Copyright 2025 Stuart Parmenter
# SPDX-License-Identifier: MIT

esphome:
  platformio_options:
    build_src_flags:
      - -include esp_chip_info.h
      - -include esp_mac.h

wifi:
  on_connect:
    then:
      - lvgl.label.update:
          id: boot_status
          text: "WiFi OK"
      - delay: 1s

api:
  on_client_connected:
    then:
      - component.suspend: boot_check
      - lvgl.label.update:
          id: boot_status
          text: "API OK"
      - delay: 1s
      - lvgl.label.update:
          id: boot_status
          text: "*Ready*"
      - delay: 2s
      - lvgl.obj.update:
          id: boot_overlay
          hidden: true

interval:
  - interval: 500ms
    startup_delay: 1s
    then:
      - if:
          condition:
            wifi.connected:
          then:
            - lvgl.label.update:
                id: boot_status
                text: "API."
          else:
            - lvgl.label.update:
                id: boot_status
                text: "WiFi."
    id: boot_check

lvgl:
  top_layer:
    widgets:
      - obj:
          id: boot_overlay
          x: 0
          y: 0
          width: 100%
          height: 100%
          bg_opa: COVER
          radius: 0
          pad_all: 0
          border_width: 0
          styles: [style_bg_black]
          hidden: false
          widgets:
            - label:
                id: bios_title
                x: 2
                y: 2
                styles: [st_spleen8]
                text: "M1 BIOS"
            - label:
                id: bios_version
                x: 2
                y: 12
                styles: [st_spleen8]
                text: !lambda |-
                  #include "esp_app_desc.h"
                  const esp_app_desc_t *app_desc = esp_app_get_description();
                  char buf[64];
                  snprintf(buf, sizeof(buf), "V:%s", app_desc->version);
                  return std::string(buf);
            - label:
                id: bios_cpu
                x: 2
                y: 22
                styles: [st_spleen8]
                text: !lambda |-
                  esp_chip_info_t ci;
                  esp_chip_info(&ci);
                  const char *model = "ESP32";
                  switch (ci.model) {
                    case CHIP_ESP32:   model = "ESP32";    break;
                    case CHIP_ESP32S2: model = "ESP32-S2"; break;
                    case CHIP_ESP32S3: model = "ESP32-S3"; break;
                    case CHIP_ESP32C3: model = "ESP32-C3"; break;
                    case CHIP_ESP32C6: model = "ESP32-C6"; break;
                    case CHIP_ESP32H2: model = "ESP32-H2"; break;
                    default:           model = "ESP32";    break;
                  }
                  char buf[32];
                  snprintf(buf, sizeof(buf), "CPU:%s", model);
                  return std::string(buf);
            - label:
                id: bios_mem
                x: 2
                y: 32
                styles: [st_spleen8]
                text: !lambda |-
                  #include "esp_heap_caps.h"

                  // Get actual memory sizes
                  size_t internal_total = heap_caps_get_total_size(MALLOC_CAP_INTERNAL | MALLOC_CAP_8BIT);
                  size_t psram_total = heap_caps_get_total_size(MALLOC_CAP_SPIRAM);

                  char buf[16];
                  size_t total_ram = internal_total + psram_total;
                  snprintf(buf, sizeof(buf), "RAM:%luk", (unsigned long)(total_ram / 1024));
                  return std::string(buf);
            - label:
                id: bios_id
                x: 2
                y: 42
                styles: [st_spleen8]
                text: !lambda |-
                  uint8_t mac[6] = {0};
                  esp_read_mac(mac, ESP_MAC_WIFI_STA);
                  char buf[32];
                  snprintf(buf, sizeof(buf), "ID:%02X%02X%02X", mac[3], mac[4], mac[5]);
                  return std::string(buf);
            - label:
                id: boot_status
                align: TOP_MID
                y: 52
                styles: [st_spleen8]
                text: "Initializing"
